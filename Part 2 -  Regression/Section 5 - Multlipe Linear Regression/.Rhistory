setwd("D:/Documentos/abi/Udemy/machinelearning-az/datasets/Part 2 - Regression/Section 4 - Simple Linear Regression")
dataset = read.csv('Salary_Data.csv')
#Dividir los datos en conjunto de entrenamiento
install.packages("caTools")
library(caTools)
set.seed(123) #semilla aleatoria
#0.8 es el porcentaje que sive para entrenar (train)
split = sample.split(dataset$Salary, SplitRatio = 2/3)
training_set = subset(dataset, split == TRUE)
testing_set = subset(dataset, split == FALSE)
View(testing_set)
View(training_set)
#Ajustar el modelo de regresión lineal simple con el conjunto de ENTRENAMIENTO
regressor = lm(formula = Salary ~ YearsExperience, data = training_set)
summary(regressor)
#Ajustar el modelo de regresión lineal con el conjunto de TEST
y_pred = predict(regressor, newdata = testing_set)
y_pred
View(testing_set)
library(ggplot2)
#Visualización de los resultados en el conjunto de ENTRENAMIENTO
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
ggplot()+
geom_point(aes(x= training_set$YearsExperience,
y = training_set$Salary),
colour="red") +
geom_line(aes(x =training_set$YearsExperience,
y= predict(regressor, newdata = training_set)),
colour="blue") +
ggtitle("Sueldo vs Años de experiencia (Conjunto de entrenamiento)") +
xlab("Años de experiencia") +
ylab("Sueldo en US")
ggplot()+
geom_point(aes(x= testing_set$YearsExperience,
y = testing_set$Salary),
colour="green") +
geom_line(aes(x =training_set$YearsExperience,
y= predict(regressor, newdata = training_set)),
colour="blue") +
ggtitle("Sueldo vs Años de experiencia (Conjunto de entrenamiento)") +
xlab("Años de experiencia") +
ylab("Sueldo en US")
ggplot()+
geom_point(aes(x= testing_set$YearsExperience,
y = testing_set$Salary),
colour="black") +
geom_line(aes(x =training_set$YearsExperience,
y= predict(regressor, newdata = training_set)),
colour="blue") +
ggtitle("Sueldo vs Años de experiencia (Conjunto de testing)") +
xlab("Años de experiencia") +
ylab("Sueldo en US")
setwd("D:/Documentos/abi/Udemy/machineLearning-RyPython/Part 2 Regression/Section 5 Multlipe Linear Regression")
dataset = read.csv('50_Startups.csv')
View(dataset)
View(dataset)
dataset$State = factor(dataset$State,
levels = c("New York", "California", "Florida"),
labels = c(1,2,3))
library(caTools)
set.seed(123) #semilla aleatoria
#0.8 es el porcentaje que sive para entrenar (train)
split = sample.split(dataset$Profit, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
testing_set = subset(dataset, split == FALSE)
View(training_set)
View(testing_set)
#Ajustar el modelo de regresion lineal multiple con el conjunto de ENTRENAMIENTO
rregression = lm(formula= Profit ~ . ,
data = training_set)
View(rregression)
#Ajustar el modelo de regresion lineal multiple con el conjunto de ENTRENAMIENTO
regression = lm(formula= Profit ~ . ,
data = training_set)
View(rregression)
summary(regression)
#Predecir los resultados con el conjunto de TESTING
y_pred = predict(regression,newdata = testing_set)
View(training_set)
# Construir un modelo optimo con la eliminacion hacia atras
regression = lm(formula= Profit ~ R.D.Spend + Administration + Marketing.Spend + State ,
data = dataset)
summary(regression)
regression = lm(formula= Profit ~ R.D.Spend + Administration + Marketing.Spend,
data = dataset)
summary(regression)
#Cuando se van eliminando las variables con mayor p valor
regression = lm(formula= Profit ~ R.D.Spend + Marketing.Spend,
data = dataset)
summary(regression)
#Cuando se van eliminando las variables con mayor p valor
regression = lm(formula= Profit ~ R.D.Spend + Administration,
data = dataset)
summary(regression)
#Cuando se van eliminando las variables con mayor p valor
regression = lm(formula= Profit ~ R.D.Spend,
data = dataset)
summary(regression)
install.packages("ElemStatsLearn")
install.packages("ElemStatsLearn")
backwardElimination <- function(x, sl) {
numVars = length(x)
for (i in c(1:numVars)){
regressor = lm(formula = Profit ~ ., data = x)
maxVar = max(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"])
if (maxVar > sl){
j = which(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"] == maxVar)
x = x[, -j]
}
numVars = numVars - 1
}
return(summary(regressor))
}
SL = 0.05
dataset = dataset[, c(1,2,3,4,5)]
backwardElimination(training_set, SL)
