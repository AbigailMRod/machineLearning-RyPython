main = 'Naïve Bayes (Conjunto de Testing)',
xlab = 'Edad', ylab = 'Sueldo Estimado',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
setwd("D:/Documentos/abi/Udemy/machineLearning-RyPython/Part 3 - Classification/Section 19 - Decision Tree Classification")
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[, 3:5]
#Ajustar el clasificador  con el conjunto de enrenamiento
library(rpart)
dataset$Purchased = factor(dataset$Purchased,
levels = c(0,1))
library(caTools)
set.seed(123) #semilla aleatoria
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
testing_set = subset(dataset, split == FALSE)
library(rpart)
classifier = rpart(formula = Purchased ~ . ,
data = training_set)
#Predicción con los resultados con el conjunto de testing
y_pred = predict(classifier, newdata = testing_set[, -3])
#Crear la matriz de confusión
cm = table(testing_set[,3], y_pred)
View(y_pred)
#Predicción con los resultados con el conjunto de testing
y_pred = predict(classifier, newdata = testing_set[, -3], type = "class")
#Crear la matriz de confusión
cm = table(testing_set[,3], y_pred)
cm
library(ElemStatLearn)
set = training_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 1)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 500)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
y_grid = predict(classifier, newdata = grid_set)
plot(set[, -3],
main = ''Clasificación'Arbol de decisión (Conjunto de Entrenamiento)',
xlab = 'Edad', ylab = 'Sueldo Estimado',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
library(ElemStatLearn)
set = training_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 1)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 500)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
y_grid = predict(classifier, newdata = grid_set)
plot(set[, -3],
main = 'ClasificaciónArbol de decisión (Conjunto de Entrenamiento)',
xlab = 'Edad', ylab = 'Sueldo Estimado',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
library(ElemStatLearn)
set = training_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 1)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 500)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
y_grid = predict(classifier, newdata = grid_set, type = "class")
plot(set[, -3],
main = 'ClasificaciónArbol de decisión (Conjunto de Entrenamiento)',
xlab = 'Edad', ylab = 'Sueldo Estimado',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
set = training_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.1)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 500)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
y_grid = predict(classifier, newdata = grid_set, type = "class")
plot(set[, -3],
main = 'ClasificaciónArbol de decisión (Conjunto de Entrenamiento)',
xlab = 'Edad', ylab = 'Sueldo Estimado',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
plot(classifier)
text(classifier)
#EXTRA
#Representación del árbol de clasificador
plot(classifier)
text(classifier)
setwd("D:/Documentos/abi/Udemy/machineLearning-RyPython/Part 3 - Classification/Section 20 - Random Forest Classification")
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[, 3:5]
#Codificar la variable de clasificación como factor
dataset$Purchased = factor(dataset$Purchased,
levels = c(0,1))
library(caTools)
set.seed(123) #semilla aleatoria
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
testing_set = subset(dataset, split == FALSE)
#Ajustar el clasificador  con el conjunto de enrenamiento
library(randomForest)
classifier = randomForest(x = training_set[,-3],
y = training_set$Purchased,
ntree = 10)
#Predicción con los resultados con el conjunto de testing
y_pred = predict(classifier, newdata = testing_set[, -3], type = "class")
#Crear la matriz de confusión
cm = table(testing_set[,3], y_pred)
cm
#Predicción con los resultados con el conjunto de testing
y_pred = predict(classifier, newdata = testing_set[, -3])
y_pred
#Crear la matriz de confusión
cm = table(testing_set[,3], y_pred)
cm
library(ElemStatLearn)
set = training_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.1)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 500)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
y_grid = predict(classifier, newdata = grid_set)
plot(set[, -3],
main = 'Random forest (Conjunto de Entrenamiento)',
xlab = 'Edad', ylab = 'Sueldo Estimado',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
#EXTRA
#Representación del árbol de clasificador
plot(classifier)
text(classifier)
setwd("D:/Documentos/abi/Udemy/machineLearning-RyPython/Part 4 - Clustering/Section 24 - K-Means Clustering")
#importar el dataset
dataset = read.csv("Mall_Customers.csv")
#importar el dataset
dataset = read.csv("Mall_Customers.csv")
X = dataset[, 4:5]
View(X)
?kmeans
set.seed(6)
wcss=vector()
for (i in 1:10) {
wcss[i] <- sum(kmeans(X,i)$withinss)
}
plot(1:10, wcss, type='b', main = "Método del codo",
xlab = "Número de clusters (k)", ylab = "WCSS(k)")
set.seed(6)
wcss = vector()
for (i in 1:10){
wcss[i] <- sum(kmeans(X, i)$withinss)
}
plot(1:10, wcss, type = 'b', main = "Método del codo",
xlab = "Número de clusters (k)", ylab = "WCSS(k)")
wcss
set.seed(6)
wcss = vector()
for (i in 1:10){
wcss[i] <- sum(kmeans(X, i)$withinss)
}
plot(1:10, wcss, type = 'b', main = "Método del codo",
xlab = "Número de clusters (k)", ylab = "WCSS(k)")
dataset = read.csv("Mall_Customers.csv")
X = dataset[, 4:5]
set.seed(6)
wcss=vector()
for (i in 1:10) {
wcss[i] <- sum(kmeans(X,i)$withinss)
}
plot(1:10, wcss, type='b', main = "Método del codo",
xlab = "Número de clusters (k)", ylab = "WCSS(k)")
#importar el dataset
dataset = read.csv("Mall_Customers.csv")
X = dataset[, 4:5]
#método del codo para saber el número de clusters
set.seed(6)
wcss=vector()
for (i in 1:10) {
wcss[i] <- sum(kmeans(X,i)$withinss)
}
plot(1:10, wcss, type='b', main = "Método del codo",
xlab = "Número de clusters (k)", ylab = "WCSS(k)")
set.seed(29)
kmeans <- kmeans(X, 5, iter.max = 300, nstart = 10)
#"visualización de clusters"
library(cluster)
clusplot(X, kmeans$cluster,
lines = 0,
shade = TRUE,
color = TRUE,
labels = 2,
plotchar = FALSE,
span = TRUE,
main = "Clustering de clientes",
xlab = "Ingresos anuales en miles USD",
ylab = "Puntuación de gastos (1-100)")
clusplot(X, kmeans$cluster,
lines = 0,
shade = TRUE,
color = TRUE,
labels = 1,
plotchar = FALSE,
span = TRUE,
main = "Clustering de clientes",
xlab = "Ingresos anuales en miles USD",
ylab = "Puntuación de gastos (1-100)")
clusplot(X, kmeans$cluster,
lines = 0,
shade = TRUE,
color = TRUE,
labels = 1,
plotchar = FALSE,
span = TRUE,
main = "Clustering de clientes",
xlab = "Ingresos anuales en miles USD",
ylab = "Puntuación de gastos (1-100)")
clusplot(X, kmeans$cluster,
lines = 0,
shade = TRUE,
color = TRUE,
labels = 1,
plotchar = TRUE,
span = TRUE,
main = "Clustering de clientes",
xlab = "Ingresos anuales en miles USD",
ylab = "Puntuación de gastos (1-100)")
clusplot(X, kmeans$cluster,
lines = 0,
shade = TRUE,
color = TRUE,
labels = 4,
plotchar = FALSE,
span = TRUE,
main = "Clustering de clientes",
xlab = "Ingresos anuales en miles USD",
ylab = "Puntuación de gastos (1-100)")
setwd("D:/Documentos/abi/Udemy/machineLearning-RyPython/Part 4 - Clustering/Section 25 - Hierarchical Clustering")
#importar el dataset
dataset= read.csv("Mall_Customers.csv")
View(dataset)
X = dataset[,4:5]
#utilizar el dendrograma para encontrar el numero optimo de clusters
dendrogram = hclust(dist(X, method = "euclidean"),
method = "ward.D")
plot(dendrogram,
main= "Dendrograma",
xlab= "Clientes del centro comercial",
ylab= "Distancia Euclídea")
hc = hclust(dist(X, method = "euclidean"),
method = "ward.D")
y_hc = cutree(hc, k=5)
View(hc)
y_hc
library(cluster)
clusplot(X, y_hc,
lines = 0,
shade = TRUE,
color = TRUE,
labels = 4,
plotchar = FALSE,
span = TRUE,
main = "Clustering de clientes",
xlab = "Ingresos anuales en miles USD",
ylab = "Puntuación de gastos (1-100)")
setwd("D:/Documentos/abi/Udemy/machineLearning-RyPython/Part 5 - Association Rule Learning/Section 28 - Apriori")
#Preprocesado de datos
dataset =read.csv("Market_Basket_Optimisation.csv")
View(dataset)
View(dataset)
#Preprocesado de datos
dataset =read.csv("Market_Basket_Optimisation.csv", header = FALSE)
#Preprocesado de datos
install.packages("arules")
library(arules)
dataset = read.transactions("Market_Basket_Optimisation.csv",
sep = ",", rm.duplicates = TRUE)
summary(dataset)
itemFrequencyPlot(dataset, topN=100)
itemFrequencyPlot(dataset, topN=20)
##Entrenar el algoritmo apriori con el dataset
rules = apriori(data = dataset,
parameter = list(support = 0.003, confidence= 0.8))
##Entrenar el algoritmo apriori con el dataset
rules = apriori(data = dataset,
parameter = list(support = 0.003, confidence= 0.4))
#Ordenasr las reglas de asociacion de la más fuerte a la más debil
inspect(sort(rules, by='lift')[1:10])
##Entrenar el algoritmo apriori con el dataset
rules = apriori(data = dataset,
parameter = list(support = 0.003, confidence= 0.6))
#Ordenasr las reglas de asociacion de la más fuerte a la más debil
inspect(sort(rules, by='lift')[1:10])
##Entrenar el algoritmo apriori con el dataset
rules = apriori(data = dataset,
parameter = list(support = 0.003, confidence= 0.7))
##Entrenar el algoritmo apriori con el dataset
rules = apriori(data = dataset,
parameter = list(support = 0.003, confidence= 0.5))
#Ordenasr las reglas de asociacion de la más fuerte a la más debil
inspect(sort(rules, by='lift')[1:10])
##Entrenar el algoritmo apriori con el dataset
rules = apriori(data = dataset,
parameter = list(support = 0.003, confidence= 0.2))
#Ordenasr las reglas de asociacion de la más fuerte a la más debil
inspect(sort(rules, by='lift')[1:10])
#Ordenasr las reglas de asociacion de la más fuerte a la más debil
inspect(sort(rules, by='lift')[1:10])
4*7/7500
##Entrenar el algoritmo apriori con el dataset
rules = apriori(data = dataset,
parameter = list(support = 0.004, confidence= 0.2))
#Ordenasr las reglas de asociacion de la más fuerte a la más debil
inspect(sort(rules, by='lift')[1:10])
#Ordenasr las reglas de asociacion de la más fuerte a la más debil
inspect(sort(rules, by='lift')[1:10])
plot(rules, method = "graph", engine = "htmlwidget")
library(arulesViz)
install.packages("arulesViz")
library(arulesViz)
plot(rules, method = "graph", engine = "htmlwidget")
setwd("D:/Documentos/abi/Udemy/machineLearning-RyPython/Part 5 - Association Rule Learning/Section 29 - Eclat")
#preprocesado de datos
library(arules)
library(arulesViz)
dataset = read.transactions("Market_Basket_Optimisation.csv",
sep = ",", rm.duplicates = TRUE)
summary(dataset)
itemFrequencyPlot(dataset, topN = 10)
# Entrenar algoritmo Eclat con el dataset
rules = eclat(data = dataset,
parameter = list(support = 0.004, minlen=2))
# Visualización de los resultados
inspect(sort(rules, by = 'support')[1:10])
setwd("D:/Documentos/abi/Udemy/machineLearning-RyPython/Part 6 - Reinforcement Learning/Section 32 - Upper Confidence Bound (UCB)")
#Importar los datoes en el sistema
dataset = read.csv("Ads_CTR_Optimisation.csv")
View(dataset)
# Importing the dataset
dataset = read.csv('Ads_CTR_Optimisation.csv')
N = 10000
d = 10
ads_selected = integer(0)
total_reward = 0
for (n in 1:N) {
ad = sample(1:10, 1)
ads_selected = append(ads_selected, ad)
reward = dataset[n, ad]
total_reward = total_reward + reward
}
# Visualising the results
hist(ads_selected,
col = 'blue',
main = 'Histogram of ads selections',
xlab = 'Ads',
ylab = 'Number of times each ad was selected')
#Importar los datoes en el sistema
dataset = read.csv("Ads_CTR_Optimisation.csv")
d = 10
N = 10000
number_of_selections = integer(d)
sums_of_rewards = integer(d)
ads_selected = integer(0)
total_reward =0
for(n in 1:N){
max_upper_bound = 0
ad = 0
for(i in 1:d){
if(number_of_selections[i]>0){
average_reward = sums_of_rewards[i]/number_of_selections[i]
delta_i = sqrt(3/2 * log(n)/ number_of_selections[i])
upper_bound = average_reward + delta_i
}else {
upper_bound = 1e400
}
if(upper_bound > max_upper_bound){
max_upper_bound = upper_bound
ad = i
}
}
ads_selected = append(ads_selected, ad)
number_of_selections[ad] = number_of_selections[ad] + 1
reward = dataset[n, ad]
sums_of_rewards[ad] = sums_of_rewards[ad] + reward
total_reward = total_reward + reward
}
#visualizacion de los resultados - Histograma
hist(ads_selected,
col = "ligtblue",
main = "Histograma de los anuncios",
xlab = "ID del anuncio",
ylab = "Frecuencia absoluta del anuncio")
#visualizacion de los resultados - Histograma
hist(ads_selected,
col = "lightblue",
main = "Histograma de los anuncios",
xlab = "ID del anuncio",
ylab = "Frecuencia absoluta del anuncio")
# Visualising the results
hist(ads_selected,
col = 'blue',
main = 'Histograma de los anuncios',
xlab = 'ID del anuncio',
ylab = 'Frecuencia absoluta del anuncio')
dataset = read.csv('Ads_CTR_Optimisation.csv')
# Implementing Random Selection
N = 10000
d = 10
ads_selected = integer(0)
total_reward = 0
for (n in 1:N) {
ad = sample(1:10, 1)
ads_selected = append(ads_selected, ad)
reward = dataset[n, ad]
total_reward = total_reward + reward
}
# Visualising the results
hist(ads_selected,
col = 'blue',
main = 'Histograma de los anuncios',
xlab = 'ID del anuncio',
ylab = 'Frecuencia absoluta del anuncio')
setwd("D:/Documentos/abi/Udemy/machineLearning-RyPython/Part 7 - Natural Language Processing/Section 36 - Natural Language Processing")
#importar el dataset
dataset = read.csv("Restaurant_Reviews.tsv", sep = "\t")
#importar el dataset
dataset = read.delim("Restaurant_Reviews.tsv", sep = "\t")
#importar el dataset
dataset = read.delim("Restaurant_Reviews.tsv")
View(dataset)
#importar el dataset
dataset = read.delim("Restaurant_Reviews.tsv", quote = '', stringsAsFactors = F)
#Limpiar el dataset
install.packages("tm")
library(tm)
corpus = VCorpus(VectorSource(dataset$Review))
View(corpus)
corpus = tm_map(corpus, content_transformer(tolower))
corpus[[1]]
as.character(corpus[[1]])
#Eliminar los numero que hay dentro de las valoraciones
corpus = tm_map(corpus, removeNumbers)
as.character(corpus[[841]])
as.character(corpus[[1]])
#eliminar las puntuaciones
corpus = tm_map(corpus, removePunctuation)
as.character(corpus[[1]])
#eliminar palabras irrelevantes
install.packages("SnowballC")
#eliminar palabras irrelevantes
#install.packages("SnowballC") para descargar las stopWords
library(SnowballC)
corpus = tm_map(corpus, removeWords, stopwords(kind = "en"))
as.character(corpus[[1]])
#convertir todas la palabras a su infinitivo (raíz)
corpus = tm_map(corpus, stemDocument)
as.character(corpus[[1]])
as.character(corpus[[2]])
View(dataset)
as.character(corpus[[3]])
#quitar espacios en blanco
corpus = tm_map(corpus, stripWhitespace)
View(dataset)
as.character(corpus[[3]])
dtm = DocumentTermMatrix(corpus)
View(dtm)
View(dtm)
#99% de palabras más frecuentes
dtm = removeSparseTerms(dtm, 0.99)
dtm
#99% de palabras más frecuentes
dtm = removeSparseTerms(dtm, 0.999)
#99% de palabras más frecuentes
dtm = removeSparseTerms(dtm, 0.999)
dtm = DocumentTermMatrix(corpus)
#99% de palabras más frecuentes
dtm = removeSparseTerms(dtm, 0.999)
dtm
##
dataset = as.data.frame(as.matrix(dtm))
View(dataset)
#importar el dataset
dataset_original = read.delim("Restaurant_Reviews.tsv", quote = '', stringsAsFactors = F)
dataset$Liked = dataset_original$Liked
dataset = as.data.frame(as.matrix(dtm))
dataset$Liked = dataset_original$Liked
############random forest
#Codificar la variable de clasificación como factor
dataset$Liked = factor(dataset$Liked,
levels = c(0,1))
#Dividir los datos en conjunto de entrenamiento
install.packages("caTools")
library(caTools)
set.seed(123) #semilla aleatoria
split = sample.split(dataset$Liked, SplitRatio = 0.80)
training_set = subset(dataset, split == TRUE)
testing_set = subset(dataset, split == FALSE)
#Ajustar el clasificador  con el conjunto de enrenamiento
library(randomForest)
classifier = randomForest(x = training_set[,-692],
y = training_set$Liked,
ntree = 10)
#Predicción con los resultados con el conjunto de testing
y_pred = predict(classifier, newdata = testing_set[, -692])
#type class es para que convierta la probabilidad solo en 2 factores
#Crear la matriz de confusión
cm = table(testing_set[,692], y_pred)
cm
