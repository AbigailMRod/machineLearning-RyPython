setwd("D:/Documentos/abi/Udemy/machineLearning-RyPython/Part 2 Regression/Section 6 Polinomial Regression")
dataset = read.csv('Position_Salaries.csv')
View(dataset)
View(dataset)
dataset = dataset[, 2:3]
View(dataset)
#Ajustar modelo re regresión lineal cone l conjunto de datos
lin_reg = lm(formula = Salary ~ . ,
data= dataset)
summary(lin_reg)
#Ajustar el modelo de regresion polinomica con el conjunto de datos
dataset$Level2 = dataset$Level^2
View(dataset)
dataset$Level3 = dataset$Level^3
poly_reg = lm(formula = Salary ~ . ,
data= dataset)
summary(poly_reg)
#Visualización del modelo lineal
library(ggplot2)
ggplot()+ geom_point(aes(x= dataset$Level, y= dataset$Salary),
color= "red") +
geom_line(aes(x = dataset$Level, y= predict(lin_reg, newdata = dataset)),
color= "blue") +
ggtitle("Predicción lineal del sueldo en función del nivel del empleado") +
xlab("Nivel del empleado") +
ylab("Sueldo en USD")
#Visualizaciónl del modelo polnómico
ggplot()+ geom_point(aes(x= dataset$Level2, y= dataset$Salary),
color= "red") +
geom_line(aes(x = dataset$Level, y= predict(lin_reg, newdata = dataset)),
color= "blue") +
ggtitle("Predicción polinómica del sueldo en función del nivel del empleado") +
xlab("Nivel del empleado") +
ylab("Sueldo en USD")
ggplot()+ geom_point(aes(x= dataset$Level, y= dataset$Salary),
color= "red") +
geom_line(aes(x = dataset$Level, y= predict(poly_reg, newdata = dataset)),
color= "blue") +
ggtitle("Predicción lineal del sueldo en función del nivel del empleado") +
xlab("Nivel del empleado") +
ylab("Sueldo en USD")
#Visualizaciónl del modelo polnómico
ggplot()+ geom_point(aes(x= dataset$Level2, y= dataset$Salary),
color= "red") +
geom_line(aes(x = dataset$Level, y= predict(poly_reg, newdata = dataset)),
color= "blue") +
ggtitle("Predicción polinómica del sueldo en función del nivel del empleado") +
xlab("Nivel del empleado") +
ylab("Sueldo en USD")
#Visualizaciónl del modelo polnómico
ggplot()+ geom_point(aes(x= dataset$Level, y= dataset$Salary),
color= "red") +
geom_line(aes(x = dataset$Level, y= predict(poly_reg, newdata = dataset)),
color= "blue") +
ggtitle("Predicción polinómica del sueldo en función del nivel del empleado") +
xlab("Nivel del empleado") +
ylab("Sueldo en USD")
dataset$Level4 = dataset$Level^4
poly_reg = lm(formula = Salary ~ . ,
data= dataset)
#Visualizaciónl del modelo polnómico
ggplot()+ geom_point(aes(x= dataset$Level, y= dataset$Salary),
color= "red") +
geom_line(aes(x = dataset$Level, y= predict(poly_reg, newdata = dataset)),
color= "blue") +
ggtitle("Predicción polinómica del sueldo en función del nivel del empleado") +
xlab("Nivel del empleado") +
ylab("Sueldo en USD")
# predicción de nuevos resultados con regresión lineal
y_pred= predict(lin_reg, newdata = data.frame(Level = 6.5))
#predicción de nuevos resultados con regresión polinómica
y_pred_poly= predict(poly_reg, newdata = data.frame(Level = 6.5,
Level2 = 6.5^2,
Level3 = 6.5^3,
Level4 = 6.5^4))
#Visualizaciónl del modelo polnómico
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
ggplot()+ geom_point(aes(x= dataset$Level, y= dataset$Salary),
color= "red") +
geom_line(aes(x = x_grid, y= predict(poly_reg, newdata = data.frame(Level=x_grid))),
color= "blue") +
ggtitle("Predicción polinómica del sueldo en función del nivel del empleado") +
xlab("Nivel del empleado") +
ylab("Sueldo en USD")
ggplot()+ geom_point(aes(x= dataset$Level, y= dataset$Salary),
color= "red") +
geom_line(aes(x = x_grid, y= predict(poly_reg, newdata = data.frame(Level=x_grid,
Level2 = x_grid^2,
Level3 = x_grid^3,
Level4 = x_grid^4))),
color= "blue") +
ggtitle("Predicción polinómica del sueldo en función del nivel del empleado") +
xlab("Nivel del empleado") +
ylab("Sueldo en USD")
setwd("D:/Documentos/abi/Udemy/machineLearning-RyPython/Part 2 Regression/Section 7 - Support Vector Regression (SVR)")
#Ajustar el modelo de regresión
install.packages("e1071")
library(e1071)
dataset = read.csv('Position_Salaries.csv')
View(dataset)
library(e1071)
regression = svm(formula = Salary ~ . ,
data = dataset,
type = "eps-regression",
kernel = "radial")
#predicción de nuevos resultados con regresión polinómica
y_pred_poly= predict(regression, newdata = data.frame(Level = 6.5))
#predicción de nuevos resultados con regresión polinómica
y_pred= predict(regression, newdata = data.frame(Level = 6.5))
dataset = dataset[, 2:3]
regression = svm(formula = Salary ~ . ,
data = dataset,
type = "eps-regression",
kernel = "radial")
#predicción de nuevos resultados con regresión polinómica
y_pred= predict(regression, newdata = data.frame(Level = 6.5))
#Visualización del modelo SVR
library(ggplot2)
ggplot()+ geom_point(aes(x= dataset$Level, y= dataset$Salary),
color= "red") +
geom_line(aes(x = dataset$Level, y= predict(regression, newdata = data.frame(Level=dataset$Level))),
color= "blue") +
ggtitle("Modelo de regresión SVR") +
xlab("Nivel del empleado") +
ylab("Sueldo en USD")
#Ajustar el modelo de regresión de árboles aleatorios
install.packages("randomForest")
library(randomForest)
?randomForest
regression = randomForest(x= dataset[1],
y= dataset$Salary,
ntree = 10)
set.seed(1234)
regression = randomForest(x= dataset[1],
y= dataset$Salary,
ntree = 10)
#predicción de nuevos resultados con regresión polinómica
y_pred= predict(regression, newdata = data.frame(Level = 6.5))
#Visualización del modelo
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
ggplot()+ geom_point(aes(x= dataset$Level, y= dataset$Salary),
color= "red") +
geom_line(aes(x = x_grid, y= predict(regression, newdata = data.frame(Level=x_grid))),
color= "blue") +
ggtitle("Modelo de árboles aleatorios") +
xlab("Nivel del empleado") +
ylab("Sueldo en USD")
#Visualización del modelo
library(ggplot2)
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
ggplot()+ geom_point(aes(x= dataset$Level, y= dataset$Salary),
color= "red") +
geom_line(aes(x = x_grid, y= predict(regression, newdata = data.frame(Level=x_grid))),
color= "blue") +
ggtitle("Modelo de árboles aleatorios") +
xlab("Nivel del empleado") +
ylab("Sueldo en USD")
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.01)
ggplot()+ geom_point(aes(x= dataset$Level, y= dataset$Salary),
color= "red") +
geom_line(aes(x = x_grid, y= predict(regression, newdata = data.frame(Level=x_grid))),
color= "blue") +
ggtitle("Modelo de árboles aleatorios") +
xlab("Nivel del empleado") +
ylab("Sueldo en USD")
regression = randomForest(x= dataset[1],
y= dataset$Salary,
ntree = 100)
#predicción de nuevos resultados con regresión polinómica
y_pred= predict(regression, newdata = data.frame(Level = 6.5))
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.01)
ggplot()+ geom_point(aes(x= dataset$Level, y= dataset$Salary),
color= "red") +
geom_line(aes(x = x_grid, y= predict(regression, newdata = data.frame(Level=x_grid))),
color= "blue") +
ggtitle("Modelo de árboles aleatorios") +
xlab("Nivel del empleado") +
ylab("Sueldo en USD")
regression = randomForest(x= dataset[1],
y= dataset$Salary,
ntree = 500)
#predicción de nuevos resultados con regresión polinómica
y_pred= predict(regression, newdata = data.frame(Level = 6.5))
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.01)
ggplot()+ geom_point(aes(x= dataset$Level, y= dataset$Salary),
color= "red") +
geom_line(aes(x = x_grid, y= predict(regression, newdata = data.frame(Level=x_grid))),
color= "blue") +
ggtitle("Modelo de árboles aleatorios") +
xlab("Nivel del empleado") +
ylab("Sueldo en USD")
#predicción de nuevos resultados con regresión polinómica
y_pred= predict(regression, newdata = data.frame(Level = 6.5))
set.seed(1234)
regression = randomForest(x= dataset[1],
y= dataset$Salary,
ntree = 500)
#predicción de nuevos resultados con regresión polinómica
y_pred= predict(regression, newdata = data.frame(Level = 6.5))
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.01)
ggplot()+ geom_point(aes(x= dataset$Level, y= dataset$Salary),
color= "red") +
geom_line(aes(x = x_grid, y= predict(regression, newdata = data.frame(Level=x_grid))),
color= "blue") +
ggtitle("Modelo de árboles aleatorios") +
xlab("Nivel del empleado") +
ylab("Sueldo en USD")
setwd("D:/Documentos/abi/Udemy/machineLearning-RyPython/Part 2 -  Regression/Section 7 - Support Vector Regression (SVR)")
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[, 2:3]
#Ajustar el modelo de regresión
install.packages("e1071")
library(e1071)
regression = svm(formula = Salary ~ . ,
data = dataset,
type = "eps-regression",
kernel = "radial")
#predicción de nuevos resultados con regresión polinómica
y_pred= predict(regression, newdata = data.frame(Level = 6.5))
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
ggplot()+ geom_point(aes(x= dataset$Level, y= dataset$Salary),
color= "red") +
geom_line(aes(x = dataset$Level, y= predict(regression, newdata = data.frame(Level=dataset$Level))),
color= "blue") +
ggtitle("Modelo de regresión SVR") +
xlab("Nivel del empleado") +
ylab("Sueldo en USD")
#Visualización del modelo SVR
library(ggplot2)
ggplot()+ geom_point(aes(x= dataset$Level, y= dataset$Salary),
color= "red") +
geom_line(aes(x = dataset$Level, y= predict(regression, newdata = data.frame(Level=dataset$Level))),
color= "blue") +
ggtitle("Modelo de regresión SVR") +
xlab("Nivel del empleado") +
ylab("Sueldo en USD")
View(dataset)
setwd("D:/Documentos/abi/Udemy/machineLearning-RyPython/Part 3 - Classification/Section 14 - Logistic Regression")
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[, 3:5]
View(dataset)
#Dividir los datos en conjunto de entrenamiento
install.packages("caTools")
library(caTools)
set.seed(123) #semilla aleatoria
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
testing_set = subset(dataset, split == FALSE)
##Escalado de valores (normalizaci?n)
### normalmente se hace, pero no siempre
training_set [, 1:2] = scale(training_set[,1:2])
testing_set [, 1:2]= scale(testing_set[, 1:2])
View(testing_set)
View(training_set)
#Ajustar el modelo de regresión logístico con el conjunto de enrenamiento
classifier = glm(formula = Purchased ~ . ,
data = training_set,
family = binomial)
#Predicción con los resultados con el conjunto de testing
prob_pred = predict(classifier, type = "response",
newdata = testing_set[, -3])
y_pred = ifelse(prob_pred>0.5, 1, 0)
#Crear la matriz de confusión
#se pasa el vector de valores reales y el de predicción
cm = table(testing_set[,3], y_pred)
cm
#Visualización del conjunto de entrenamiento
#install.packages("ElemStatLearn")
library(ElemStatLearn)
#Visualización del conjunto de entrenamiento
install.packages("ElemStatLearn")
library(ElemStatLearn)
#Visualización del conjunto de entrenamiento
install.packages("ElemStatLearn")
install.packages("D:/Documentos/abi/Desacargas/ElemStatLearn_2015.6.26.tar.gz", repos = NULL, type = "source")
library(ElemStatLearn)
set = training_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
prob_set = predict(classifier, type = 'response', newdata = grid_set)
y_grid = ifelse(prob_set > 0.5, 1, 0)
plot(set[, -3],
main = 'Clasificación (Conjunto de Entrenamiento)',
xlab = 'Edad', ylab = 'Sueldo Estimado',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
set = training_set
set = testing_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
prob_set = predict(classifier, type = 'response', newdata = grid_set)
y_grid = ifelse(prob_set > 0.5, 1, 0)
plot(set[, -3],
main = 'Clasificación (Conjunto de Testing)',
xlab = 'Edad', ylab = 'Sueldo Estimado',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
setwd("D:/Documentos/abi/Udemy/machineLearning-RyPython/Part 3 - Classification/Section 15 - K-Nearest Neighbors (K-NN)")
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[, 3:5]
View(dataset)
library(caTools)
set.seed(123) #semilla aleatoria
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
testing_set = subset(dataset, split == FALSE)
View(training_set)
training_set [, 1:2] = scale(training_set[,1:2])
testing_set [, 1:2]= scale(testing_set[, 1:2])
View(testing_set)
View(training_set)
#Ajustar el clasificador  con el conjunto de enrenamiento
library(class)
y_pred= knn(train = training_set[, -3],
test = testing_set[, -3],
cl = training_set[, 3],
k = 5)
y_pred
#Crear la matriz de confusión
cm = table(testing_set[,3], y_pred)
cm
library(ElemStatLearn)
set = training_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
y_grid = knn(train = training_set[, -3],
test = grid_set,
cl = training_set[, 3],
k = 5)
plot(set[, -3],
main = 'K-NN (Conjunto de Entrenamiento)',
xlab = 'Edad', ylab = 'Sueldo Estimado',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
set = testing_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
y_grid = knn(train = training_set[, -3],
test = grid_set,
cl = training_set[, 3],
k = 5)
plot(set[, -3],
main = 'K-NN (Conjunto de Testing)',
xlab = 'Edad', ylab = 'Sueldo Estimado',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
# Visualización del conjunto de testing
set = testing_set
# Visualización del conjunto de testing
set = testing_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
set = testing_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
y_grid = knn(train = training_set[, -3],
test = grid_set,
cl = training_set[, 3],
k = 5)
plot(set[, -3],
main = 'K-NN (Conjunto de Testing)',
xlab = 'Edad', ylab = 'Sueldo Estimado',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
